# -*- coding: utf-8 -*-
"""Phase 2 Normal task

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uAHNauUvpXao_FeiPGj4i58oGZY1uaAY

**Import the Necessary libraries**
"""

import numpy as np
import pandas as pd

"""**Read the CSV**"""

df=pd.read_csv("/content/diabetes.csv")

df

"""**Data Exploration**"""

#head
df.head()

#tail
df.tail()

#describe
df.describe()

#info
df.info()

#shape
df.shape

#displaying the columns
df.columns

"""**Data Visualization**"""

df.plot()

#to check the null value
df.isnull()

#total null value
df.isnull().sum()

#total value
df.isnull().sum().sum()

#number of Diabetical and Non-diabetical Persons
df['Outcome'].value_counts()

#missing value using function
import missingno as msno
import matplotlib.pyplot as plt
msno.bar(df)
plt.show()

"""**Analysing Correlation**"""

df.corr()

import seaborn as sns
plt.figure(figsize=(8,6))
sns.heatmap(df.corr(), cmap='BuPu')

"""**Seperating Features and Target**"""

#assigning the values
X=df.drop('Outcome',axis=1)
y=df['Outcome']

print(X)

print(y)

#train_test_split
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.5,random_state=0)

#standardasiation
from sklearn.preprocessing import StandardScaler
a=StandardScaler()
X_train= a.fit_transform(X_train)
X_test=a.transform(X_test)

"""**Appyling Alogrithm**"""

#algorithm
from sklearn.tree import DecisionTreeClassifier
clf=DecisionTreeClassifier(criterion="entropy",random_state=0)

#fit the data for training
clf.fit(X_train,y_train)

#prediciting the data from the trained X
Y_pred=clf.predict(X_test)

"""**Performance evaluation**"""

#confusion matrix
from sklearn.metrics import confusion_matrix
cm= confusion_matrix(y_test,Y_pred)

#display cm
cm

#to check the accuracy score
from sklearn.metrics import accuracy_score
accuracy_score(y_test,Y_pred)

#ploting the result
plt.hist(Y_pred)

